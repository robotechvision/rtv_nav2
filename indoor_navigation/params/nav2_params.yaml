amcl:
  ros__parameters:
    use_sim_time: True
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "base_footprint"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "differential"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: scan

amcl_map_client:
  ros__parameters:
    use_sim_time: True

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: /odometry/filtered
    bt_loop_duration: 10
    default_server_timeout: 20
    enable_groot_monitoring: True
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    default_nav_to_pose_bt_xml: "indoor_replanning_and_recovery.xml"
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node
    - nav2_smooth_path_action_bt_node
    - rtv_nav2_resetter_node_bt_node
    - rtv_nav2_fallback_pipeline_bt_node
    - rtv_nav2_had_feedback_condition_bt_node
    - rtv_nav2_progress_checker_pipeline_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: True

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 10.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"]
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    general_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.5
      yaw_goal_tolerance: 0.5
      stateful: True
    
    FollowPath:
      # plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      plugin: "rtv_nav2_csc_pursuit_controller::CscPursuitController"
      rotation_radius: 0.40
      blind_start: false
      max_no_data_time: 25.0
      should_control: true
      max_velocity_linear: 0.25
      max_velocity_linear_decrease_per_rotational_velocity: 0.0
      max_velocity_rotational_decrease_per_radius_decrease: 0.0
      max_velocity_rotational: 0.25
      min_movement_duration: 0.4
      rrads_per_rrad_change_penalty: 1.0
      control_traj_error_positional_penalty: 1.0
      control_traj_error_angular_penalty: 1.0
      control_traj_error_longitudinal_penalty: 0.3
      control_traj_error_cost_penalty: 0.2
      cost_check_step: 0.2
      cost_check_meters_per_radian: 0.1
      angular_distance_multiplier: 0.2
      min_carrot_dist: 0.25
      transform_tolerance: 0.1

      # odom_topic: "/odometry/filtered"
      # desired_linear_vel: 0.5
      # max_linear_accel: 2.5
      # max_linear_decel: 2.5
      # lookahead_dist: 0.6
      # min_lookahead_dist: 0.3
      # max_lookahead_dist: 0.9
      # lookahead_time: 1.5
      # rotate_to_heading_angular_vel: 0.5
      # use_velocity_scaled_lookahead_dist: false
      # min_approach_linear_velocity: 0.1
      # use_approach_linear_velocity_scaling: true
      # max_allowed_time_to_collision: 1.0
      # use_regulated_linear_velocity_scaling: true
      # use_cost_regulated_linear_velocity_scaling: true
      # regulated_linear_scaling_min_radius: 0.9
      # regulated_linear_scaling_min_speed: 0.25
      # use_rotate_to_heading: true
      # rotate_to_heading_min_angle: 0.785
      # max_angular_accel: 3.2
      # cost_scaling_dist: 1.5
      # cost_scaling_gain: 1.0
      # goal_dist_tol_hysteresis: 0.25

    # DWB parameters
    # FollowPath:
    #   plugin: "dwb_core::DWBLocalPlanner"
    #   debug_trajectory_details: True
    #   min_vel_x: 0.0
    #   min_vel_y: 0.0
    #   max_vel_x: 1.0
    #   max_vel_y: 0.0
    #   max_vel_theta: 1.0
    #   min_speed_xy: 0.0
    #   max_speed_xy: 1.0
    #   min_speed_theta: 0.0
    #   # Add high threshold velocity for turtlebot 3 issue.
    #   # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
    #   acc_lim_x: 2.5
    #   acc_lim_y: 0.0
    #   acc_lim_theta: 3.2
    #   decel_lim_x: -2.5
    #   decel_lim_y: 0.0
    #   decel_lim_theta: -3.2
    #   vx_samples: 20
    #   vy_samples: 5
    #   vtheta_samples: 20
    #   sim_time: 1.7
    #   linear_granularity: 0.05
    #   angular_granularity: 0.025
    #   transform_tolerance: 0.2
    #   xy_goal_tolerance: 0.25
    #   trans_stopped_velocity: 0.25
    #   short_circuit_trajectory_evaluation: True
    #   stateful: True
    #   critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
    #   BaseObstacle.scale: 0.02
    #   PathAlign.scale: 32.0
    #   PathAlign.forward_point_distance: 0.1
    #   GoalAlign.scale: 24.0
    #   GoalAlign.forward_point_distance: 0.1
    #   PathDist.scale: 32.0
    #   GoalDist.scale: 24.0
    #   RotateToGoal.scale: 32.0
    #   RotateToGoal.slowing_factor: 5.0
    #   RotateToGoal.lookahead_time: -1.0

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 4.0
      publish_frequency: 3.0
      global_frame: odom
      robot_base_frame: base_footprint
      use_sim_time: True
      rolling_window: true
      width: 14
      height: 14
      resolution: 0.05
      footprint: "[[-0.6, -0.35], [-0.6, 0.35], [0.25, 0.35], [0.25, -0.35]]"
      footprint_padding: 0.0
      # robot_radius: 0.35
      plugins: ["obstacle_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.6 #log(128/252)/(CLOSEST_FOOTPRINT_POINT - hypot(FARTHEST_FOOTPRINT_POINT_X, FARTHEST_FOOTPRINT_POINT_Y))
        inflation_radius: 3.0
      # voxel_layer:
      #   plugin: "nav2_costmap_2d::VoxelLayer"
      #   enabled: True
      #   publish_voxel_map: True
      #   origin_z: 0.0
      #   z_resolution: 0.05
      #   z_voxels: 16
      #   max_obstacle_height: 2.0
      #   mark_threshold: 0
      #   observation_sources: scan
        # publish_voxel_map: True
        # origin_z: 0.0
        # z_resolution: 0.05
        # z_voxels: 16
        # max_obstacle_height: 2.0
        # mark_threshold: 0
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /front/scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          obstacle_max_range: 6.0
          obstacle_min_range: 0.0
          raytrace_max_range: 5.0
          raytrace_min_range: 0.0
          data_type: "LaserScan"
      static_layer:
        map_subscribe_transient_local: True
      always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: True
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 4.0
      publish_frequency: 3.0
      global_frame: map
      robot_base_frame: base_footprint
      use_sim_time: True
      # robot_radius: 0.35
      footprint: "[[-0.6, -0.35], [-0.6, 0.35], [0.25, 0.35], [0.25, -0.35]]"
      footprint_padding: 0.025
      resolution: 0.1
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /front/scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          obstacle_max_range: 6.0
          obstacle_min_range: 0.0
          raytrace_max_range: 5.0
          raytrace_min_range: 0.0
          data_type: "LaserScan"
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.6 #log(128/252)/(CLOSEST_FOOTPRINT_POINT - hypot(FARTHEST_FOOTPRINT_POINT_X, FARTHEST_FOOTPRINT_POINT_Y))
        inflation_radius: 3.0
      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: True
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

map_server:
  ros__parameters:
    use_sim_time: True
    yaml_filename: "turtlebot3_world.yaml"

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["SmoothPath"]
    optimization_length: 10.0
    optimization_length_backwards: 5.0

    SmoothPath:
      plugin: "rtv_ceres_costaware_smoother/CeresCostawareSmoother"
      minimum_turning_radius: 0.40
      w_curve: 30.0                 # weight to minimize curvature of path
      w_dist: 0.0                   # weight to bind path to original as optional replacement for cost weight
      w_smooth: 15000.0             # weight to maximize smoothness of path
      w_cost: 0.015                 # weight to steer robot away from collision and cost
      w_cost_dir_change: 0.08       # higher weight during forward/reverse direction change which is often accompanied with dangerous rotations
      dir_change_length: 1.5        # length of the section around direction change in which nodes use w_cost_dir_change instead of w_cost
      cost_scaling_factor: 1.6      # this should match the inflation layer's parameter
      input_downsampling_factor: 3  # every n-th node of the path is taken. Useful for speed-up
      cost_check_points: [-0.185, 0.0, 1.0] # points of robot footprint to grab costmap weight from. Useful for assymetric robot footprints. Format: [x, y, weight]

      optimizer:
        max_time: 10.0                # maximum compute time for smoother
        max_iterations: 70            # max iterations of smoother
        debug_optimizer: false        # print debug info
        gradient_tol: 5e3
        fn_tol: 1.0e-15
        param_tol: 1.0e-20
        advanced:
          min_line_search_step_size: 1.0e-9
          max_num_line_search_step_size_iterations: 20
          line_search_sufficient_function_decrease: 1.0e-3
          max_num_line_search_direction_restarts: 20
          max_line_search_step_expansion: 10

optimizer_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    # GridBased:
    #   plugin: "nav2_navfn_planner/NavfnPlanner"
    #   tolerance: 0.5
    #   use_astar: false
    #   allow_unknown: true
    
    GridBased:
      # plugin: "nav2_smac_planner/SmacPlannerHybrid"
      # tolerance: 0.5                      # tolerance for planning if unable to reach exact pose, in meters, for 2D node
      # downsample_costmap: false           # whether or not to downsample the map
      # downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      # allow_unknown: false                # allow traveling in unknown space
      # max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      # max_on_approach_iterations: 1000    # maximum number of iterations to attempt to reach goal once in tolerance, 2D only
      # max_planning_time: 3.5              # max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
      # motion_model_for_search: "DUBIN"    # 2D Moore, Von Neumann; Hybrid Dubin, Redds-Shepp; State Lattice set internally
      # cost_travel_multiplier: 2.0         # For 2D: Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      # angle_quantization_bins: 64         # For Hybrid/Lattice nodes: Number of angle bins for search, must be 1 for 2D node (no angle search)
      # analytic_expansion_ratio: 3.5       # For Hybrid/Lattice nodes: The ratio to attempt analytic expansions during search for final approach.
      # minimum_turning_radius: 0.40        # For Hybrid/Lattice nodes: minimum turning radius in m of path / vehicle
      # reverse_penalty: 2.1                # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
      # change_penalty: 0.15                # For Hybrid nodes: penalty to apply if motion is changing directions, must be >= 0
      # non_straight_penalty: 1.50          # For Hybrid nodes: penalty to apply if motion is non-straight, must be => 1
      # cost_penalty: 1.7                   # For Hybrid nodes: penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      # lookup_table_size: 20.0             # For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.
      # cache_obstacle_heuristic: True      # For Hybrid nodes: Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.     
      # smoother:
      #   max_iterations: 1000
      #   w_smooth: 0.3
      #   w_data: 0.2
      #   tolerance: 1e-10

      plugin: "nav2_smac_planner/SmacPlannerHybrid"
      tolerance: 0.5                    # tolerance for planning if unable to reach exact pose, in meters, for 2D node
      downsample_costmap: false         # whether or not to downsample the map
      downsampling_factor: 1            # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: false              # allow traveling in unknown space
      max_iterations: -1                # maximum total iterations to search for before failing
      max_on_approach_iterations: 1000  # maximum number of iterations to attempt to reach goal once in tolerance, 2D only
      max_planning_time: 30.0           # max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
      smooth_path: false                # Whether to smooth searched path
      analytic_expansion_ratio: 3.5
      max_analytic_expansion_angle_range: 1.00
      max_analytic_expansion_cost_subelevation: 0.15
      max_analytic_expansion_length: 0.6
      cost_travel_multiplier: 2.0
      obstacle_heuristic_enabled: true
      cache_obstacle_heuristic: true
      motion_model_for_search: "REEDS_SHEPP"  # For 2D node: MOORE, VON_NEUMANN; For SE2 node: DUBIN, REEDS_SHEPP
      angle_quantization_bins: 64       # For SE2 node: Number of angle bins for search, must be 1 for 2D node (no angle search)
      minimum_turning_radius: 0.40      # For SE2 node & smoother: minimum turning radius in m of path / vehicle
      reverse_penalty: 1.001             # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
      change_penalty: 1.00              # For SE2 node: penalty to apply if motion is changing directions, must be >= 0
      change_reverse_penalty: 5.00      # For SE2 node: penalty to apply if motion is changing forward/reverse direction, must be >= 0
      non_straight_penalty: 1.10        # For SE2 node: penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 2.80                # For SE2 node: penalty to apply to higher cost zones
      lookup_table_size: 20.0           # For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.

      smoother:
        max_iterations: 0

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_recoveries/Spin"
    backup:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: odom
    robot_base_frame: base_footprint
    transform_timeout: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: True

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"   
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200
